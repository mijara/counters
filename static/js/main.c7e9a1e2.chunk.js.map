{"version":3,"sources":["components/Counter/Button.js","components/Counter/Number.js","components/Counter/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Button","children","onPress","onClick","Number","backgroundColor","foregroundColor","Counter","id","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","count","setCount","colors","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sjBAWA,IAAMA,EAAYC,IAAOC,IAAV,KAaAC,EArBf,YAAyC,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAC3B,OACE,kBAACL,EAAD,CAAWM,QAASD,GACjBD,I,uNCKP,IAAMJ,EAAYC,IAAOC,IAAV,KAUAK,EAlBf,YAAgC,IAAbH,EAAY,EAAZA,SACjB,OACE,kBAAC,EAAD,KACGA,I,4OCwDP,IAAMJ,EAAYC,IAAOC,IAAV,IAOX,gBAAGM,EAAH,EAAGA,gBAAH,kCAA8CA,EAA9C,MACA,gBAAGC,EAAH,EAAGA,gBAAH,uBAAmCA,EAAnC,OAGWC,EAnEf,YAA6D,IAAzCC,EAAwC,EAAxCA,GAAIH,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,gBAAmB,EAoB5D,SAAyBG,EAAKC,GAAc,MAGJC,mBAAS,WAC7C,IAEE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GAEzC,OAAOG,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAGP,OADAC,QAAQC,IAAIF,GACLR,KAZ+B,mBAGnCW,EAHmC,KAGtBC,EAHsB,KAiC1C,MAAO,CAACD,EAfS,SAAAE,GACf,IAEE,IAAMC,EACJD,aAAiBE,SAAWF,EAAMF,GAAeE,EAEnDD,EAAeE,GAEfX,OAAOC,aAAaY,QAAQjB,EAAKO,KAAKW,UAAUH,IAChD,MAAON,GAEPC,QAAQC,IAAIF,MAhDUU,CAAgB,YAAD,OAAapB,EAAb,KAAoB,GADH,mBACnDqB,EADmD,KAC5CC,EAD4C,KAW1D,OACE,kBAAC,EAAD,CAAWzB,gBAAiBA,EAAiBC,gBAAiBA,GAC5D,kBAAC,EAAD,CAAQJ,QAVS,WACnB4B,EAASD,EAAQ,KASgB,kBAAC,IAAD,OAC/B,kBAAC,EAAD,KAASA,GACT,kBAAC,EAAD,CAAQ3B,QARM,WAChB4B,EAASD,EAAQ,KAOa,kBAAC,IAAD,SCjB5BE,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAexDC,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAS5B,gBAAiB0B,EAAO,GAAIzB,gBAAgB,UAAUE,GAAI,IACnE,kBAAC,EAAD,CAASH,gBAAiB0B,EAAO,GAAIzB,gBAAgB,UAAUE,GAAI,IACnE,kBAAC,EAAD,CAASH,gBAAiB0B,EAAO,GAAIzB,gBAAgB,UAAUE,GAAI,IACnE,kBAAC,EAAD,CAASH,gBAAiB0B,EAAO,GAAIzB,gBAAgB,UAAUE,GAAI,IACnE,kBAAC,EAAD,CAASH,gBAAiB0B,EAAO,GAAIzB,gBAAgB,UAAUE,GAAI,IACnE,kBAAC,EAAD,CAASH,gBAAiB0B,EAAO,GAAIzB,gBAAgB,UAAUE,GAAI,MCFrD0B,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c7e9a1e2.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nfunction Button ({ children, onPress }) {\n  return (\n    <Container onClick={onPress}>\n      {children}\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  border-radius: 1000px;\n  width: 48px;\n  height: 48px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: 300;\n  font-size: 24px;\n  background-color: rgba(255, 255, 255, 0.25);\n  cursor: pointer;\n`\n\nexport default Button\n","import React from 'react'\nimport styled from 'styled-components'\n\nfunction Number ({ children }) {\n  return (\n    <Container>\n      {children}\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  width: 48px;\n  height: 48px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: 300;\n  font-size: 48px;\n`\n\nexport default Number\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Button from './Button'\nimport Number from './Number'\nimport { IoIosRemove, IoIosAdd } from 'react-icons/io'\n\nfunction Counter ({ id, backgroundColor, foregroundColor }) {\n  const [count, setCount] = useLocalStorage(`'counter:${id}'`, 0)\n\n  const handleRemove = () => {\n    setCount(count - 1)\n  }\n\n  const handleAdd = () => {\n    setCount(count + 1)\n  }\n\n  return (\n    <Container backgroundColor={backgroundColor} foregroundColor={foregroundColor}>\n      <Button onPress={handleRemove}><IoIosRemove/></Button>\n      <Number>{count}</Number>\n      <Button onPress={handleAdd}><IoIosAdd/></Button>\n    </Container>\n  )\n}\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nconst Container = styled.div`\n  user-select: none;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  padding: 32px 80px;\n  margin-bottom: 1px;\n  ${({ backgroundColor }) => `background-color: ${backgroundColor};`}\n  ${({ foregroundColor }) => `color: ${foregroundColor};`}\n`\n\nexport default Counter\n","import React from 'react'\nimport './App.css'\nimport Counter from './components/Counter'\n\nconst colors = ['#6699cc', '#ba553c', '#acbf3e', '#9363a9', '#329fa3', '#e2c655']\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Counter backgroundColor={colors[0]} foregroundColor=\"#ffffff\" id={0}/>\n      <Counter backgroundColor={colors[1]} foregroundColor=\"#ffffff\" id={1}/>\n      <Counter backgroundColor={colors[2]} foregroundColor=\"#ffffff\" id={2}/>\n      <Counter backgroundColor={colors[3]} foregroundColor=\"#ffffff\" id={3}/>\n      <Counter backgroundColor={colors[4]} foregroundColor=\"#ffffff\" id={4}/>\n      <Counter backgroundColor={colors[5]} foregroundColor=\"#ffffff\" id={5}/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}